package net.groupw.tp_so.Gui;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import net.groupw.tp_so.Files.*;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Locale;

public class UserList extends JFrame {
    private ArrayList<Log> logs;
    private JPanel UserListPanel;
    private JScrollPane UserListScrollPanel;
    private JButton createButton;
    private JButton removeButton;
    private JButton updateButton;
    private JList userList;
    private JButton removerButton;
    private JTable userTable;
    private JScrollBar userListScrollbar;
    private JLabel UserListlabel;
    private DefaultTableModel tableModel;

    public UserList(ArrayList<Log> logs) {
        setContentPane(UserListPanel);
        setTitle("UserList");
        setSize(720, 480);
        setLocationRelativeTo(null);
        setVisible(true);

        ImageIcon icon = new ImageIcon("src/main/java/net/groupw/tp_so/assets/logo.png");
        setIconImage(icon.getImage());

        String[] columns = {"name", "password", "role", "station_id"};

        tableModel = new DefaultTableModel(columns, 0);
        userTable.setModel(tableModel);

        displayUsers();
        createButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new Register(logs);
            }
        });
        removerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new RemoveUser(logs);
            }
        });
        updateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new UpdateUser(logs);
            }
        });
    }

    private void displayUsers() {
        // Call the getAllUsers method from the UserCRUD class
        String[][] users = UserCRUD.getAllUsersAsArray();

        for (String[] user : users) {
            tableModel.addRow(user);
        }
    }

    private void createUIComponents() {

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        UserListPanel = new JPanel();
        UserListPanel.setLayout(new FormLayout("fill:20px:noGrow,left:4dlu:noGrow,fill:60px:grow,left:4dlu:noGrow,fill:20px:noGrow", "center:20px:noGrow,top:4dlu:noGrow,center:20px:noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:20px:noGrow"));
        UserListPanel.setBackground(new Color(-855310));
        UserListPanel.setPreferredSize(new Dimension(720, 480));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        CellConstraints cc = new CellConstraints();
        UserListPanel.add(spacer1, cc.xy(3, 9, CellConstraints.DEFAULT, CellConstraints.FILL));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        UserListPanel.add(spacer2, cc.xy(5, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        UserListPanel.add(spacer3, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        UserListScrollPanel = new JScrollPane();
        UserListScrollPanel.setBackground(new Color(-855310));
        UserListScrollPanel.setVerticalScrollBarPolicy(20);
        UserListPanel.add(UserListScrollPanel, cc.xy(3, 5, CellConstraints.FILL, CellConstraints.FILL));
        userTable = new JTable();
        UserListScrollPanel.setViewportView(userTable);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:grow,left:4dlu:noGrow,fill:d:noGrow,left:4dlu:noGrow,fill:30px:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:5dlu:noGrow,fill:30px:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow", "center:d:grow"));
        panel1.setBackground(new Color(-855310));
        panel1.setPreferredSize(new Dimension(680, 50));
        UserListPanel.add(panel1, cc.xy(3, 7));
        createButton = new JButton();
        createButton.setBackground(new Color(-16751002));
        Font createButtonFont = this.$$$getFont$$$("Roboto Light", Font.BOLD, 14, createButton.getFont());
        if (createButtonFont != null) createButton.setFont(createButtonFont);
        createButton.setForeground(new Color(-855310));
        createButton.setPreferredSize(new Dimension(100, 50));
        createButton.setText("Create");
        panel1.add(createButton, cc.xy(3, 1));
        removerButton = new JButton();
        removerButton.setBackground(new Color(-6877690));
        Font removerButtonFont = this.$$$getFont$$$("Roboto Light", Font.BOLD, 14, removerButton.getFont());
        if (removerButtonFont != null) removerButton.setFont(removerButtonFont);
        removerButton.setForeground(new Color(-855310));
        removerButton.setPreferredSize(new Dimension(100, 50));
        removerButton.setText("Remove");
        panel1.add(removerButton, cc.xy(7, 1));
        updateButton = new JButton();
        updateButton.setBackground(new Color(-16751002));
        Font updateButtonFont = this.$$$getFont$$$("Roboto Light", Font.BOLD, 14, updateButton.getFont());
        if (updateButtonFont != null) updateButton.setFont(updateButtonFont);
        updateButton.setForeground(new Color(-855310));
        updateButton.setPreferredSize(new Dimension(100, 50));
        updateButton.setText("Update");
        panel1.add(updateButton, cc.xy(11, 1));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer4, cc.xy(5, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final com.intellij.uiDesigner.core.Spacer spacer5 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer5, cc.xy(9, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final com.intellij.uiDesigner.core.Spacer spacer6 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer6, cc.xy(1, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final com.intellij.uiDesigner.core.Spacer spacer7 = new com.intellij.uiDesigner.core.Spacer();
        panel1.add(spacer7, cc.xy(13, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        userListScrollbar = new JScrollBar();
        UserListPanel.add(userListScrollbar, cc.xy(4, 5, CellConstraints.DEFAULT, CellConstraints.FILL));
        UserListlabel = new JLabel();
        Font UserListlabelFont = this.$$$getFont$$$("Roboto Light", Font.BOLD, 24, UserListlabel.getFont());
        if (UserListlabelFont != null) UserListlabel.setFont(UserListlabelFont);
        UserListlabel.setForeground(new Color(-16751002));
        UserListlabel.setText("UserList");
        UserListPanel.add(UserListlabel, cc.xy(3, 3, CellConstraints.CENTER, CellConstraints.DEFAULT));
        final com.intellij.uiDesigner.core.Spacer spacer8 = new com.intellij.uiDesigner.core.Spacer();
        UserListPanel.add(spacer8, cc.xy(3, 1, CellConstraints.DEFAULT, CellConstraints.FILL));
        UserListScrollPanel.setVerticalScrollBar(userListScrollbar);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return UserListPanel;
    }
}
