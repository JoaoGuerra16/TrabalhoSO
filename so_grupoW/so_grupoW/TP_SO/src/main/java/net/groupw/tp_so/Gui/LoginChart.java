package net.groupw.tp_so.Gui;


import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import net.groupw.tp_so.Files.Log;
import net.groupw.tp_so.Files.LogEntry;

import net.groupw.tp_so.Files.Login;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

import javax.swing.*;
import java.awt.*;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.*;
import java.util.List;

public class LoginChart extends JFrame {
    private static String FILE_PATH = "src/main/java/net/groupw/tp_so/DB/users.json";


    private LogEntry logEntry;
    private static ObjectMapper objectMapper = new ObjectMapper();

    private JPanel chartPanel;


    public LoginChart(String title) {
        super(title);

        Map<String, Integer> loginCounts = readLoginCountsFromJson();
        CategoryDataset dataset = createDataset(loginCounts);
        JFreeChart chart = createChart(dataset);

        ChartPanel chartPanel = new ChartPanel(chart);
        chartPanel.setPreferredSize(new Dimension(800, 600));
        setContentPane(chartPanel);
        setTitle("Gr√°fico");
        ImageIcon icon = new ImageIcon("src/main/java/net/groupw/tp_so/assets/logo.png");
        setIconImage(icon.getImage());

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private Map<String, Integer> readLoginCountsFromJson() {
        Map<String, Integer> loginCounts = new HashMap<>();

        try {
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode userData = objectMapper.readTree(new FileReader(FILE_PATH));

            if (userData.isArray()) {
                Iterator<JsonNode> iterator = userData.elements();
                while (iterator.hasNext()) {
                    JsonNode user = iterator.next();
                    JsonNode loginCountsNode = user.path("login_counts");
                    Iterator<String> dateIterator = loginCountsNode.fieldNames();
                    while (dateIterator.hasNext()) {
                        String date = dateIterator.next();
                        int count = loginCountsNode.path(date).asInt();
                        loginCounts.merge(date, count, Integer::sum);
                    }
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        return loginCounts;
    }

    private CategoryDataset createDataset(Map<String, Integer> loginCounts) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        for (Map.Entry<String, Integer> entry : loginCounts.entrySet()) {
            dataset.addValue(entry.getValue(), "Logins", entry.getKey());
        }

        return dataset;
    }

    private JFreeChart createChart(CategoryDataset dataset) {
        JFreeChart chart = ChartFactory.createBarChart(
                "Daily Login Counts",
                "Date",
                "Login Count",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        plot.setDomainAxis(new CategoryAxis("Date"));
        plot.setRangeAxis(new NumberAxis("Login Count"));
        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setTickUnit(new NumberTickUnit(5));
        return chart;
    }


    private String getCurrentDate() {
        return LocalDate.now().toString();
    }


    public static void main(String[] args) {
        new LoginChart("Teste");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        chartPanel = new JPanel();
        chartPanel.setLayout(new BorderLayout(0, 0));
        chartPanel.setBackground(new Color(-1));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return chartPanel;
    }
}
