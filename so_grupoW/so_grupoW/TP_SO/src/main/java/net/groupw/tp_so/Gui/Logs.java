package net.groupw.tp_so.Gui;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import net.groupw.tp_so.Enumerations.LogType;
import net.groupw.tp_so.Files.Log;
import net.groupw.tp_so.Files.LogEntry;

import java.awt.*;
import java.io.File;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.JFileChooser;

import net.groupw.tp_so.Files.SaveLogs;
import net.groupw.tp_so.Interface.LogCallback;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Locale;

public class Logs extends JFrame implements LogCallback {
    private JPanel LogsPanel;
    private JLabel LogsLabel;
    private JScrollPane LogsScrollPane;
    private JScrollBar LogsScrollBar;
    private JTextPane LogsTextPane;
    private JButton saveButton;
    private SaveLogs saveLogs;

    public Logs() {
        setContentPane(LogsPanel);
        setTitle("Logs");
        setSize(720, 480);
        pack();
        setVisible(true);

        displayLogs();
        // Set this instance as the callback for LogEntry
        LogEntry.getInstance().setLogCallback(this);

        ImageIcon icon = new ImageIcon("src/main/java/net/groupw/tp_so/assets/logo.png");
        setIconImage(icon.getImage());


        saveButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                JFileChooser fileChooser = new JFileChooser();
                int result = fileChooser.showOpenDialog(null);

                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    String filePath = selectedFile.getAbsolutePath();
                    if (!filePath.toLowerCase().endsWith(".txt")) {
                        filePath += ".txt";
                    }

                    saveLogs = new SaveLogs(filePath);
                    saveLogs.saveLogsToFile(LogEntry.getInstance().getLogList());

                    System.out.println("Selected file: " + filePath);
                }
            }
        });
    }

    public void displayLogs() {
        List<Log> logs = LogEntry.getInstance().getLogList();

        for (Log log : logs) {
            addLog(log.toString());
        }
    }

    @Override
    public void onLogAdded(String log) {
        addLog(log);
    }

    private void addLog(String log) {
        SwingUtilities.invokeLater(() -> {
            try {
                StyledDocument styledDocument = LogsTextPane.getStyledDocument();
                Style style = styledDocument.getStyle(StyleContext.DEFAULT_STYLE);
                styledDocument.insertString(styledDocument.getLength(), log + "\n", style);
                LogsTextPane.setCaretPosition(styledDocument.getLength());
            } catch (BadLocationException e) {
                throw new RuntimeException(e);
            }
        });
    }

    public static void main(String[] args) {
        new Logs();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        LogsPanel = new JPanel();
        LogsPanel.setLayout(new FormLayout("fill:4px:noGrow,left:4dlu:noGrow,fill:477px:grow,fill:max(d;4px):noGrow,fill:4dlu:noGrow", "center:52px:noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:20px:noGrow"));
        LogsPanel.setPreferredSize(new Dimension(720, 480));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        CellConstraints cc = new CellConstraints();
        LogsPanel.add(spacer1, cc.xy(3, 7, CellConstraints.DEFAULT, CellConstraints.FILL));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        LogsPanel.add(spacer2, cc.xy(1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        LogsPanel.add(spacer3, cc.xy(5, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        LogsLabel = new JLabel();
        LogsLabel.setAlignmentX(0.0f);
        LogsLabel.setBackground(new Color(-16751002));
        Font LogsLabelFont = this.$$$getFont$$$("Roboto Light", Font.BOLD, 24, LogsLabel.getFont());
        if (LogsLabelFont != null) LogsLabel.setFont(LogsLabelFont);
        LogsLabel.setForeground(new Color(-16751002));
        LogsLabel.setText("Logs");
        LogsPanel.add(LogsLabel, cc.xy(3, 1, CellConstraints.CENTER, CellConstraints.DEFAULT));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:noGrow", "center:d:grow"));
        panel1.setPreferredSize(new Dimension(100, 50));
        LogsPanel.add(panel1, cc.xy(3, 5, CellConstraints.LEFT, CellConstraints.DEFAULT));
        saveButton = new JButton();
        saveButton.setAutoscrolls(false);
        saveButton.setBackground(new Color(-16751002));
        Font saveButtonFont = this.$$$getFont$$$("Roboto Light", Font.BOLD, 18, saveButton.getFont());
        if (saveButtonFont != null) saveButton.setFont(saveButtonFont);
        saveButton.setForeground(new Color(-855310));
        saveButton.setPreferredSize(new Dimension(90, 50));
        saveButton.setText("Save");
        panel1.add(saveButton, cc.xy(1, 1));
        LogsScrollPane = new JScrollPane();
        LogsScrollPane.setVerticalScrollBarPolicy(22);
        LogsPanel.add(LogsScrollPane, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.FILL));
        LogsTextPane = new JTextPane();
        LogsTextPane.setEditable(false);
        LogsScrollPane.setViewportView(LogsTextPane);
        LogsScrollBar = new JScrollBar();
        LogsPanel.add(LogsScrollBar, cc.xy(4, 3, CellConstraints.DEFAULT, CellConstraints.FILL));
        LogsScrollPane.setVerticalScrollBar(LogsScrollBar);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return LogsPanel;
    }
}
